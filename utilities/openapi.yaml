openapi: 2.0.0
info:
  title: "Mozilla Doorman"
  description: |
    Doorman is an **authorization micro-service** that allows to checks if an arbitrary subject is allowed to perform an action on a resource, based on a set of rules (policies).

    Having a centralized access control service has several advantages:

    - it clearly dissociates authentication from authorization
    - it provides a standard and generic permissions system to services developers
    - it facilitates permissions management across services (eg. makes revocation easier)
    - it allows authorizations monitoring, metrics, anomaly detection

    ### Workflow with JWT

    When the JWT issuer is configured for a service, a typical workflow is:

    1. Users obtain JWT from an Identity Provider (eg. Auth0)
    1. They use it to call the service API endpoint
    1. The service posts an authorization request on *Doorman* to check if the user is allowed
    1. *Doorman* uses the `Origin` request header to select the set of policies
    1. *Doorman* builds a list of strings (principals) for this user, and matches the policies

    *Doorman* will verify that the specified JSON Web Token (JWT) is valid.
    The claimed audience in the token (`"aud"`) will be checked against the `Origin` request header.

    The authorization request *principals* will be built from the JWT payload:

    * `"sub"`: `userid:{}`
    * `"email"`: `email:{}` (*optional*)
    * `"groups"`: `group:{}, group:{}, ...` (*optional*)

    ### Without JWT

    If the JWT issuer is not configured for a service, no authentication is required and the principals
    are posted in the authorization body.

    A typical workflow in this case would be:

    1. Users call the service API endpoint
    1. The service authenticates the user and builds the list of principals
    1. The service posts an authorization request on *Doorman* containing the list of principals to check if the user is allowed

    ### API Summary

    Basically, use **POST /allowed** to check authorization requests.

    **Request**:

    ```HTTP

    POST /allowed HTTP/1.1
    Origin: https://api.service.org

    {
      "principals": ["userid:myself"]
      "action" : "delete",
      "resource": "articles/doorman-introduce",
      "context": {
        "env": "stage",
        "roles": ["editor"]
      }
    }
    ```

    **Response**:

    ```HTTP

    HTTP/1.1 200 OK
    Content-Type: application/json

    {
      "allowed": true,
      "principals": [
        "role:editor",
        "userid:myself"
      ]
    }
    ```

  version: "0.1"
  contact:
    url: "irc://irc.mozilla.org:6696/#product-delivery"
  license:
    name: "Mozilla Public License 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

tags:
- name: Doorman
  description: Main API endpoints.
- name: Utilities
  description: Operational and metadata endpoints.

paths:

  /allowed:
    post:
      summary: Check authorization request
      description: |
        Are those `principals` allowed to perform this `action` on this `resource` in this `context`?

        With JWT verification enabled, the principals are read from the JWT payload.

      operationId: "allowed"
      consumes:
        - application/json
      produces:
      - "application/json"
      parameters:
        - in: header
          name: Origin
          type: string
          description: |
            The service identifier (eg. `https://api.service.org`). It must match one of the known service from the policies files.

            With JWT verification enabled, the claimed audience in the JWT will be checked against the value of this header.

        - in: header
          name: Authorization
          type: string
          description: |
            With JWT verification enabled, a valid JSON Web Token (JWT) must be provided in the `Authorization` request header.
            (eg. `Bearer eyJ0eXAiOiJKV1QiLCJhbG...9USXpOalEzUXpV`)

        - in: body
          description: |
            Authorization request as JSON.

            Note that **every field is optional**.

          required: true
          schema:
            type: object
            properties:
              principals:
                description: |
                  **Only with JWT verification disabled**

                  Arbitrary list of strings (eg. `userid:alice`, `group:editors`).

                type: array
                items:
                  type: string
              action:
                description: Any domain specific action (eg. `read`, `delete`, `signoff`)
                type: string
              resource:
                description: Any resource (eg. `blocklist`, `/update/rules/35`)
                type: string
              context:
                description: |
                  The context can contain any extra information to be matched in policies conditions.
                  The context field `remoteIP` will be forced by the server.
                  The values provided in the `roles` context field will expand the principals with extra `role:{}` values.

                type: object
                properties:
                  roles:
                    type: array
                    items:
                      type: string
          example:
            principals: ["userid:ldap|ada", "email:ada@lau.co"]
            action: create
            resource: comment
            context:
              env:
                - stage
              roles:
                - changer
      responses:
        "400":
          description: "Missing headers or invalid posted data."
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: Missing `Origin` request header
        "401":
          description: "JWT token is invalid."
        "403":
          description: "JWT claimed audience is invalid (authorization failed)."
        "200":
          description: "Return whether it is allowed or not."
          schema:
            type: object
            properties:
              allowed:
                type: boolean
              principals:
                type: array
                items:
                  type: string
          example:
            allowed: true
            principals: ["userid:ldap|ada", "email:ada@lau.co", "tag:mayor", "role:changer"]
      tags:
      - Doorman

  /__reload__:
    post:
      summary: "Reload the policies"
      description: |
        Reload the policies (synchronously). This endpoint is meant to be used as a Web hook when policies files were changed.

        > It would be wise to limit the access to this endpoint (e.g. by IP on reverse proxy)

      operationId: "reload"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Reloaded successfully."
          schema:
            type: object
            properties:
              success:
                type: boolean
          example:
            success: true

        "500":
          description: "Reload failed."
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            success: false
            message: could not parse YAML in "https://github.com/ops/conf/policies.yaml"
      tags:
      - Doorman

  /__heartbeat__:
    get:
      summary: "Is the server working properly? What is failing?"
      operationId: "heartbeat"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Server working properly"
          schema:
            type: "object"
          example:
        "503":
          description: "One or more subsystems failing."
          schema:
            type: "object"
          example:
      tags:
      - Utilities

  /__lbheartbeat__:
    get:
      summary: "Is the server reachable?"
      operationId: "lbheartbeat"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Server reachable"
          schema:
            type: "object"
            properties:
              ok:
                type: boolean
          example:
            ok: true
      tags:
      - Utilities

  /__version__:
    get:
      summary: "Running instance version information"
      operationId: "version"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Return the running instance version information"
          schema:
            type: "object"
            properties:
              source:
                type: string
              version:
                type: string
              commit:
                type: string
              build:
                type: string
          example:
            source: https://github.com/mozilla/doorman
            version: "1.0"
            commit: 490ed70efff482d17a
            build: "20171102"
      tags:
      - Utilities

  /__api__:
    get:
      summary: "Open API Specification documentation."
      operationId: "doc"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Return the Open Api Specification."
          schema:
            type: "object"
      tags:
      - Utilities

  /contribute.json:
    get:
      summary: "Open source contributing information"
      operationId: "contribute"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Return open source contributing information."
          schema:
            type: "object"
      tags:
      - Utilities
